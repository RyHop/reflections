Hello World
I am starting the reflections adventure with this one. I am talking about using the command "FC" in Windows which compares two files. It is intriguing to find that out and useful. I did not know about it until now. I need to tell more people!

 Having access to different histories of a file could make it easier to find bugs, and fix mistakes that you wish you never made. 

 The Pros and Cons of manually choosing when to create a commit is better in my opinion. It is more flessible. You can choose when to commit one feature rather than autosaving multiple changes that may or may not be relevant. Though, automatically saving runs less risk of losing checkpoints and files, hopefully the developer is competent enought to handle where to save at checkpoints and saving files approriately.

  Git Allows multiple files to be save in one committ because, when coding, one file can affect other files if a function or class is changed.

  So, I learned git log, and I am really familared with its functions; however, git diff is different. I haven't directly tried it, but I have a feeling I got the idea
  .
  So, I tried the git diff command..doesn't recognize it. I can use FC in the Windows Command Prompt though. 

  I also learned that git checkout (commit Number) can revert back to a previous version.

  So, the video asked me to set up my workspace--the one in Udacity. Since I was weary about downloading stuff, I did not want to customize anything. I will just have to make due...if I need to change it, I will later as need fit.

  I just learned how to create a new repository.
  It is git init.
  git status sees the current conditions of the repository.

 I know staging area is the spotlight of files I've added that are being changed, but I do not understand how to commit yet. Lets see.

 So, I have a little knowledge how staging works. It is the middle man between your hardrive files and the repository. U need to add ur files to staging to be tracked for version control, then you can commit the new changes, all in all, it keep tracks of the log. 

 I believe if you only commit one file...it still should take a snapshot of the rest of the program instead of adding the whole program. If thats the case, I will remember and write about it :).

 Now, I have learned git branch....Branch is amazing. It allows you to completely diverge from the real product to test stuff, and now you can add new features. Cool! Branch is awesome and I hope other version controls have it. Cool!

 So, I learned more exciting, interesting, stuff. Its hard to take in, but usefull. I know there is a graph-like feature for developers to visualize commit history. I will google that when needed. I know that detached head just means..going back to old commit...and to make that commit a head...i guess just it already does it if you are checking out that commmit. If you have branches later on down the road, you can simply create them and open with a shortcut they provide. :)

I am using vim because it was already downloaded lol...there may or may not be a better text editor...I would say who cares as long as you got code..but you need to have a clear, creative head to write code. That's true...beautifully code.

So, I learned git merge (master) (other)....it is straight forward. Cool!
