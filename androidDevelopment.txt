 This is a new reflection file started for android Development. I have one hand-written, so I will keep updating that as well. But, I will update this one also to keep my skillset with git and github.

  Firstly, I need to learn how to use git and github with Android Studio. I will figure out when the time comes. I figure I can just create a repository and clone the package...hopefully.

  One of the things I learned today was the class R.id or R.layout..or I believe just "R"...its a reference for the resource folder..so thats why, when refering to a textview or string such as R.findViewByID.idk....its is refering to that.

  Mabye I should start dating these. (15 December 2017).
  I learned how to create an array in java. Something like Strings [] toyname = 'a'. It is very confusing when doings that instead of doing it in python, but I will manage. Also, in the Udacity tutorial, I got the Strings array from a class method from another file. Example: Strings [] toyname = toys.toyNames();. When I started android development in Java 4 or 5 years ago, I did not know what oys.toyNames() would come from. Now, I do. I learned a little something from classes in my intro to programming class, and it all makes sense now. When I looked at the Java class that I got the list of strings from, I can simply see myself doing it....Times have changed!

  (Same Date)
  I just want to reflect about adding a scroll view. It makes your content scroll. Its simply just adding a scroll view widget around the text view that we made equal an array of strings. That's it. It is not different textviews together. Huh..But I bet there is a different way of doing it. We will find out.

 (16 December 2017)
  Just checking in with the strings resource folder. I haven't been using this, but I should if I want my app to translate to other languages. I found that to make a string in the resource folder, just add one like the app name before..and the id is in quotations marks. If want to use, say on the XML layout, just put in quotations, @Strings/value. That is it.
  (Same Date)
  Maybe I will do alot of reflection now, because I am getting thick into the code. So, I created a menu to be put on the taskbar. I created an item in main.xml(new menu resource file in menu resource folder). The <item contained android:title attribute, app:showAsAction="ifRoom" attribute, android:orderInCateogry="1" if you have multiple, and android:id to reference it in code.
  Now the weird thing in code is that I did not know what I was doing at first. I was writing onCreateOptionsMenu..oh nvm, I guess this method is called when the Activity starts. Then I inflated using getMenuinflator().infalate(R.menu.main,menu). Then i returned true. 
  For the menuinflator.inflate parameters, I can only guess the reference main menu is an integer recognized by Android Studio, and the second paramter is menu..just saying its a menu. 
  In the onOPtionsItemSelected method(), I know this is clicked when an option has been selected in menu. I got the viewId by intializing it to item.getItemID(). So, it is a property of item I believe. Then I made a TOast to confirm what I clicked. I love toats! Easy and Simple. Aftwardwards, I return the super command which I believe just tells the method that you can go ahead and show the menu..the code following does not matter. 

  (Same Date but late)
  It took me approximately an hour to understand the URI class. I was not about the .appendParameter because I simply did not know what I was looking at and how to use it. In general, I understand that the URI builder is for using URL in code which we translate into a JAVA URL after using the URI builder. In the URI builder, I just know you have your base URL, your parameters or extra wierd lookin codes in the URL, and you build it afterwards.
  After I was done building the URI and translating it to a URL, I created a method which took the github query (used in making the URI building)and sent it to the URI builder. Once done, I dispalyed the URL ona textview. Maybe that was this whole thing was about. Asking the user what data to query on github, and building the url to search using a HTTP Request. That is most likely it, but I do not know how the githubquery is put together in the URI builder. I will know soon, if I need to know further information. But now, move on :)

  (Same Date)
  More on Connection to the internet. Now, We are using a HttpURLConnection which allows us to actually connect to the internet. It is not much acually. First, make an open connection. Secondly, use an InputStream to get to the text. Third, use a scanner and use a ".useDelimiter("\\A") to allow different sizes of data and ensure flawless connection. Lastly, disconnect.
  Next is permission. I pretty much know about those through previous apps.

  (17 December 2017)
  I just finished the "Connecting to Internet" course on Udacity. What a course! My mind is blanc, confused trying to learn all those things. It's good. Firstly, I understand the URI, and HTTPURLConnection methods. I just probably have to look them up to use them, but at least I know of them and their functionality. I can't remember them off my brain though.
  I learned AyncsTask or something spelled like that. It's mainly for switching calculations and processes off the main thread which is important for efficient app transistions. I understand mostly how to do it, but its a lot to remember off the top of my head. 
  I understand how to create a menu item and do something if clicked really well.
  I learned how the Error message work, show or hide data, and making a progess bar.
  And finally, I  understand how to parse JSON data by hand. 

  If I had to completely misunderstannd one concept in this lesson, it would be some of the classes Udacity wrote without explaininng . COmments in the code said "it will be taught in a future lesson" or what was the broad meaning of that ccode.

  (21 December 2017)
  Just reflecting on RecyclerView before I move on to other stuff. So, a Recycleview is for a clearner, more efficient solution to displaying views in a list on a screen without initilizing each view in code and haven to call them multiple times if scrolling. First, You compile a dependicy. You can find it with a google search. Then, you create the layout file. Once done, in a java file, create a class that extends the Recyle View..or I believe its the ViewHolder. Then build the constrtuctor that initaties the views you want. This is all from my understanding.
  Just another commit. So, there is recycelingView, adapter, and layoutmanagers. Thats it on a higher level. Recycleing view is in charge of reusing views, adapater is for the data, and the layoutmanger is designed for orientation. I already touched on making the recycleingView. Making the adapter is the same way without the layout making. Just extend a java class and load the overriding methods, and the layout inflator I believe. The layoutmanager can be done in the main class with a simple initialization.
  For the Recyecler View...just make the layout, intiilize it, set the adapter, and the layoutmanager. You should be good.
  So when creating the recycler view, create the xml file, compile the dependeciy, initizlize and reference it in the main activity class.
  For the adapter, extend it in a java file class. "RecyclerView.Adapter<MyAdapter.ViewHolder>, take in any parameters, create a blass that extends viewHolder, define your views or widgets in that viewHOlder, create onCreateViewHolder(Override) and inflate the layout, provide a contructor for the adapte, and finally, create a onBindViewHolder to update the views.
  (December 22, 2017)
  Learning Intents. I have already learned enough to make my previous app, so I can breeze through this lesson. But, it is nice to know implicit intents which opens a camera or call someone. It basically performs an action and it doesn't matter what app executses it. Also, opening a webpage is easy. just make it a URI, parse it with Uri, and then put it into an intent. 
  URi is bascially a broader URL. it has a scheme:http, host:www.google.com, path: /courses, queory: q=Money, and/or fragment: #something. Those are the components.
  Build Uri class makes more sense with them explaining how to show a location on the map using an intent. I can google search common intents by the way to help explain it. Then, process to build Uri as suggested with the intent.
  (23 December 2017)
  Now, I am doing the lesson about Android life cycles. I pretty much know half of the information by working with one of my previous apps. Though, I did not know tbout Loaders and SaveInstanceState. Interesting. SaveInstanceState is when you save data if the current android lifecycle is interrupted. Loader helps keep the current async task up to date or searching for a URL if orientation of the phone switches in between causing a change of states. 




