

Now, Udacity is telling me to create a new file on github and reflect upon my ideas about remotes or when do I need one. From my understanding,
you only need yone when you are about to put your information into github or "push" it.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
 (Side note): This is the first question I put in my reflections file because I couldn't find the shortcut to copy and paste into git...so I didnt bother.
 It is best not to stay automcatically up-to-date because you don't know what changed if you constantly are being fed updates. You can easily have conflict detections if the project includes a large group of people.


 
Describe the differences between forks, clones, and branches. When would you use one instead of another?
 Clones take the copy of a project with the same ownership. Forks take a copy of a project from someone else, they keep the ownership, but you can modify it as your own. Branches are more of a local thing where you branch only to try a new feature or just try something new within your files or code.


What is the benefit of having a copy of the last known state of the remote stored locally?
 It is great to stay up-to-date with the software you are working on if you are going ofline for a little wild. If you going to have conflict merges later, it is best to configure them now, so the whole product will work. As you can tell, I am not too confident in my answer, but I know somewhat of the answer. Let's just push!


How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
 Without Git or GitHub, people would most likely code inside a room, call each other, video chat, or screen share to make sure code stays on the right page. Github and Git now, allows easier independent development.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
 This is the part of Github that sort of confuses me, but I think I understand.  I want to make changes in a separate branch when changes to the master branch has been done by someone else, so I will take those changes into my branch and work on them rather then directly in master. That way, if something goes wrong, before or after the change, its in my separate branch. 



